#!/usr/bin/env ruby

require "thor"
require "open3"
require "tty-prompt"
require "tty-table"
require_relative "pco_apps"
require_relative "post_to_slack"
require_relative "pco_box"
require_relative "other_apps"
require_relative "utils"

class WorkDay < Thor
  include Thor::Actions
  include Utils

  package_name "WorkDay"

  class_option(:skip_slack, type: :boolean, aliases: :s, desc: "Whether to send a message to Slack or not. Default is to send a message.")

  desc "start", "Start up your PCO workday"
  option(:skip_update_box, type: :boolean, aliases: :b, desc: "Whether to update pco-box or not. Default is to update.")
  option(:skip_update_apps, type: :boolean, aliases: :a, desc: "Whether to update apps or not. Default is to update.")
  option(:run_webpack, type: :boolean, aliases: :w, desc: "Whether to run webpack when updating apps or not. Default is to skip it.")
  def start
    PostToSlack.start_day unless options[:skip_slack]
    PcoApps.before_update unless options[:skip_update_apps]
    PcoBox.update unless options[:skip_update_box]
    PcoBox.update_apps(options[:run_webpack]) unless options[:skip_update_apps]
    PcoApps.after_update unless options[:skip_update_apps]
    PcoBox.start if options[:skip_update_box] && options[:skip_update_apps]
    OtherApps.open
  end

  desc "end", "End your PCO workday"
  option(:skip_box_stop, type: :boolean, aliases: :b, desc: "Whether to stop pco-box or not. Default is to stop.")
  def end
    PostToSlack.end_day unless options[:skip_slack]
    PcoBox.stop unless options[:skip_box_stop]
    OtherApps.close
    # offer to wip commit uncommitted work?
    # offer to push up branch to github if it's not already?
  end

  # desc "configure", "Configure prefs for work_day"
  # def configure
  #   config = read_config

  #   slack = setup_slack(config["slack"])
  #   selected_apps = select_apps_to_start_day_with

  #   config["slack"] = slack
  #   config["other_apps"].each do |app|
  #     next unless selected_apps.include?(app["name"])
  #     app["enabled"] = true
  #   end
  #   say "âœ… Config updated."
  #   write_config(config)
  # end

  # desc "config", "Displays your currently configured prefs"
  # def config
  #   config = read_config
  #   display_slack_config(config["slack"])
  #   display_other_apps_config(config["other_apps"])
  # end

  private

  # def display_slack_config(slack)
  #   table = TTY::Table.new(header: %w[Channel Icon]) { |t|
  #     t << [slack["channel"], slack["icon_url"]]
  #   }

  #   say "Slack config:"
  #   puts table.render(:unicode) { |r|
  #     r.border.separator = :each_row
  #     r.padding = [0, 1]
  #     r.resize = true
  #   }
  # end

  # def display_other_apps_config(other_apps)
  #   pastel = Pastel.new
  #   table = TTY::Table.new(header: %w[Name Enabled]) { |t|
  #     other_apps.each { |a| t << [a["name"], a["enabled"]] }
  #   }

  #   say "Apps to start your day with:"
  #   puts table.render(:unicode) { |r|
  #     r.border.separator = :each_row
  #     r.padding = [0, 1]
  #     r.resize = true
  #     r.filter = ->(val, row_index, col_index) do
  #       col_index == 1 && val.strip == "true" ? pastel.black.on_green(val) : val
  #     end
  #   }
  # end

  # def setup_slack(config)
  #   prompt = TTY::Prompt.new
  #   if ENV.fetch("SLACK_API_TOKEN", "").empty?
  #     prompt.warn "You'll need to setup and Environment variable `SLACK_API_TOKEN`."
  #     prompt.say "You can obtain a Slack API token here: https://api.slack.com/custom-integrations/legacy-tokens."
  #     prompt.say "Check the README for more info."
  #     prompt.keypress("When you've done that, press enter to continue", keys: [:return])
  #   end
  #   config["channel"] = prompt.ask("What is your team's Slack channel (For example: #cca-publishing-team)?", value: config["channel"])
  #   config["icon_url"] = prompt.ask("What's the URL to the icon you'd like to use when posting messages? (Optional)", value: config["icon_url"])
  #   config
  # end

  # def select_apps_to_start_day_with
  #   enabled_apps = OtherApps.enabled.map(&:name)
  #   all_apps = OtherApps.all.map(&:name)
  #   TTY::Prompt.new.multi_select("Select apps you'd like to start your day with?", all_apps, default: enabled_apps)
  # end
end

WorkDay.start(ARGV)
