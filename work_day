#!/usr/bin/env ruby

require "thor"
require "open3"
require "tty-prompt"
require_relative "pco_apps"
require_relative "post_to_slack"
require_relative "pco_box"
require_relative "other_apps"
require_relative "utils"

class WorkDay < Thor
  include Thor::Actions
  include Utils

  package_name "WorkDay"

  class_option(:skip_slack, type: :boolean, aliases: :s, desc: "Whether to send a message to Slack or not. Default is to send a message.")

  desc "start", "Start up your PCO workday"
  option(:skip_update_box, type: :boolean, aliases: :b, desc: "Whether to update pco-box or not. Default is to update.")
  option(:skip_update_apps, type: :boolean, aliases: :a, desc: "Whether to update apps or not. Default is to update.")
  option(:run_webpack, type: :boolean, aliases: :w, desc: "Whether to run webpack when updating apps or not. Default is to skip it.")
  def start
    PostToSlack.start_day unless options[:skip_slack]
    PcoApps.before_update unless options[:skip_update_apps]
    PcoBox.update unless options[:skip_update_box]
    PcoBox.update_apps(options[:run_webpack]) unless options[:skip_update_apps]
    PcoApps.after_update unless options[:skip_update_apps]
    PcoBox.start if options[:skip_update_box] && options[:skip_update_apps]
    OtherApps.open
  end

  desc "end", "End your PCO workday"
  option(:skip_box_stop, type: :boolean, aliases: :b, desc: "Whether to stop pco-box or not. Default is to stop.")
  def end
    PostToSlack.end_day unless options[:skip_slack]
    PcoBox.stop unless options[:skip_box_stop]
    OtherApps.close
    # offer to wip commit uncommitted work?
    # offer to push up branch to github if it's not already?
  end

  desc "configure", "Configure prefs for work_day"
  def configure
    selected_apps = select_apps_to_start_day_with

    config = read_config
    config["other_apps"].each do |app|
      next unless selected_apps.include?(app["name"])
      app["enabled"] = true
    end
    write_config(config)
  end

  private

  def select_apps_to_start_day_with
    enabled_apps = OtherApps.enabled.map(&:name)
    all_apps = OtherApps.all.map(&:name)
    TTY::Prompt.new.multi_select("Select apps you'd like to start your day with?", all_apps, default: enabled_apps)
  end
end

WorkDay.start(ARGV)
